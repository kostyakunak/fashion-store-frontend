import React, { useState } from 'react';
import GenericTableManager from '../../components/generic/GenericTableManager';
import { getUsers, createUser, updateUser, deleteUser } from '../../api/usersApi';

const AdminUsersGeneric = () => {
    const [passwordVisible, setPasswordVisible] = useState({});

    const apiClient = {
        getAll: getUsers,
        create: (data) => {
            // –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if (!data.email || !data.firstName || !data.lastName || !data.phone || !data.password || !data.role) {
                throw new Error('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
            const emailRegex = /^[^\s@]+@[^\s@]+$/;
            if (!emailRegex.test(data.email)) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
            if (data.password.length < 6) {
                throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            }
            
            return createUser(data);
        },
        update: (id, data) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if (!data.email || !data.firstName || !data.lastName || !data.phone || !data.role) {
                throw new Error('–í—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
            const emailRegex = /^[^\s@]+@[^\s@]+$/;
            if (!emailRegex.test(data.email)) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
            if (data.password && data.password.length < 6) {
                throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            }
            
            // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
            if (!data.password) {
                const { password, ...dataWithoutPassword } = data;
                return updateUser(id, dataWithoutPassword);
            }
            
            return updateUser(id, data);
        },
        delete: deleteUser
    };

    const togglePasswordVisibility = (itemId) => {
        setPasswordVisible(prev => ({
            ...prev,
            [itemId]: !prev[itemId]
        }));
    };

    const fields = [
        {
            name: 'id',
            label: 'ID',
            type: 'number',
            readOnly: true
        },
        {
            name: 'firstName',
            label: '–ò–º—è',
            type: 'text',
            required: true
        },
        {
            name: 'lastName',
            label: '–§–∞–º–∏–ª–∏—è',
            type: 'text',
            required: true
        },
        {
            name: 'email',
            label: 'Email',
            type: 'email',
            required: true
        },
        {
            name: 'phone',
            label: '–¢–µ–ª–µ—Ñ–æ–Ω',
            type: 'tel',
            required: true
        },
        {
            name: 'password',
            label: '–ü–∞—Ä–æ–ª—å',
            render: (item, onChange) => (
                <div style={{ display: 'flex', alignItems: 'center' }}>
                    <input
                        type={passwordVisible[item.id] ? 'text' : 'password'}
                        value={item.password || ''}
                        onChange={(e) => onChange('password', e.target.value)}
                        placeholder={item.id ? '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å' : '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
                    />
                    <button
                        type="button"
                        onClick={() => togglePasswordVisibility(item.id)}
                        style={{ marginLeft: '5px', border: 'none', background: 'none', cursor: 'pointer' }}
                    >
                        {passwordVisible[item.id] ? 'üôà' : 'üëÅÔ∏è'}
                    </button>
                </div>
            ),
            display: () => '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'
        },
        {
            name: 'role',
            label: '–†–æ–ª—å',
            render: (item, onChange) => (
                <select
                    value={item.role || 'USER'}
                    onChange={(e) => onChange('role', e.target.value)}
                >
                    <option value="USER">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                    <option value="ADMIN">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
            )
        }
    ];

    // –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç true - –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é "–Ω–∞ –ª–µ—Ç—É"
    const validators = {
        firstName: () => true,
        lastName: () => true,
        email: () => true,
        phone: () => true,
        password: () => true,
        role: () => true
    };

    return (
        <GenericTableManager
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
            apiClient={apiClient}
            fields={fields}
            validators={validators}
            styles={{
                container: {
                    padding: '20px',
                    maxWidth: '1200px',
                    margin: '0 auto'
                }
            }}
        />
    );
};

export default AdminUsersGeneric; 